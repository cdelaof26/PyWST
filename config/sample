#     This is a config sample for PyWST
# The purpose of this file is provide an scalable and easy way to use PyWST
# to create JS components based on HTML files.
#
# This file can contain several configurations for different directories and files,
# each configuration block is delimited by the name between square brackets.
#
# PATH: Specifies where the files are located
#       Value: absolute or relative path
#
# FILE: Specifies where a file is located relative to PATH
#       Value: absolute, relative file path or *
#              * can be only used with BEHAVIOR = return or UN_REPL_ID must have a value
#
# BEHAVIOR: Denotes how the component function will behave:
#     return:  functions will return the component
#     replace: functions will replace a component given its id.
#              'replace' requires a REPL_ID for every FILE, ids will be assigned as found.
#              If REPL_ID is empty, the script tag will be replaced with the component.
#
# REPL_ID: The id of an element that will be replaced by a single component in the configuration
#          (cannot be used with BEHAVIOR = return or UN_REPL_ID)
#       Value: string, can be empty
#
# UN_REPL_ID: The id of an element that will be replaced by any component in the configuration
#             (cannot be used with BEHAVIOR = return or REPL_ID)
#       Value: string
#
# PARAMS: A list of JavaScript parameters that the generated function will take.
#         There needs to be PARAMS as many FILE are specified.
#
#         In order to use a parameter specified in PARAMS inside an HTML file, it needs to be defined
#         as ${myParameter} (like JS template literals) inside an attribute or in a text node. For example
#             HTML
#                     <p id="${myCustomId}" class="my css classes">${myCustomText}</p>
#
#             Config
#                     FILE = /path/to/file.html
#                     PARAMS = myCustomId, myCustomText
#
#                     FILE = /path/to/file1.html
#                     PARAMS =
#
#         If BEHAVIOR = replace, then the element to replace needs to have the attributes specified within as follows.
#             <div id="idToReplace" myCustomId="newId" myCustomText="Hello World"> ... </div>
#
#       Value: list separated by commas, can be empty
#
# ONLOAD: Adds an DOMContentLoaded listener to the generated script,
#         this option requires BEHAVIOR = replace
#       Value: True or False
#       Default: False
#
# WATCH: Creates a daemon that will transcript files on content change.
#        Any relative FILE outside PATH will not be transcribed, a workaround is to create
#        a new configuration block to include those files.
#       Value: True or False
#       Default: False
#
# MINIFY_CODE: Determines if the generated code will have format, setting it to True
#              will remove format reducing file size. Might improve load times.
#       Value: True or False
#       Default: True
#
# ALLOW_ANYTHING_IN_CLOSE_TAGS: Advanced
# IGNORE_MISMATCHING_CLOSING_TAGS: Advanced
#       Value: True or False
#       Default: False
#
# AUTOMATICALLY_DECODE_HTML_ENTITIES: Advanced
#       Value: True or False
#       Default: True
#
#
# Properties with a default value can be absent and others can be absent if not required
#
# Advanced options are advise to leave as default.
# Documentation for those options can be found at top of utilities.py
#

[ConfigName1]
PATH = /path/to/dir
FILE = *
BEHAVIOR = return
WATCH = True

[ConfigName2]
PATH = /path/to/dir
FILE = hello.html
REPL_ID = elementId1
PARAMS = elementId, myJSProperty, myText

FILE = world.html
REPL_ID = elementId2
PARAMS = elementId

BEHAVIOR = replace
WATCH = False

[ConfigName3]
PATH = ../dir1
FILE = *
UN_REPL_ID = data-container
BEHAVIOR = replace
ONLOAD = True

[ConfigName4]
PATH = ../dir2
FILE = *
REPL_ID =  # The replacement id is empty so the script tags will be replaced
BEHAVIOR = replace
ONLOAD = True
